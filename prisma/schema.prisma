// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(uuid())
    email     String   @unique
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    resumes   Resume[]
}

model Resume {
    id        String   @id @default(uuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    name      String
    title     String
    layout    String // "singleColumn" or "twoColumn"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // Common fields
    summary  String?
    email    String?
    phone    String?
    location String?

    // Fields for both layouts
    categories Category[]

    // Fields specific to single-column layout
    experience String?
    education  String?
    skills     String?

    // Fields specific to two-column layout
    leftColumn  Column? @relation("LeftColumn")
    rightColumn Column? @relation("RightColumn")
}

model Category {
    id       String   @id @default(uuid())
    title    String
    items    String[]
    resumeId String
    resume   Resume   @relation(fields: [resumeId], references: [id])
}

model Column {
    id            String    @id @default(uuid())
    side          String // "left" or "right"
    resumeLeftId  String?   @unique
    resumeRightId String?   @unique
    resumeLeft    Resume?   @relation("LeftColumn", fields: [resumeLeftId], references: [id])
    resumeRight   Resume?   @relation("RightColumn", fields: [resumeRightId], references: [id])
    sections      Section[]
}

model Section {
    id       String @id @default(uuid())
    title    String
    content  String
    columnId String
    column   Column @relation(fields: [columnId], references: [id])
}
